package com.common.rain.Tractional;

/**
 * @Description: 失效描述
 * @Author: yfc
 * @Date: 2024/7/3 16:52
 */
public class TractionalTT {
	//1、非public方法
//	2、rollBackFor设置错误
//	3、设置事务传播行为为，spoort等3中行为，事务不会回滚
//	4、异常被catch捕获没有抛出
//	6、在有@Tractional注解的方法里调用没有@Tractional注解的方法





//	事务传播特性
//	事务传播特性是Spring框架中用于控制事务行为的重要概念，它决定了在多层次方法调用中事务的创建、使用和挂起规则。Spring提供了7种不同的事务传播特性，每种特性都有其特定的使用场景和效果。12
//
//	PROPAGATION_REQUIRED：这是默认的事务传播特性。它要求方法必须在事务中运行。如果当前存在事务，则加入该事务；如果当前没有事务，则创建一个新的事务。这种特性确保了方法总是在事务的上下文中执行，无论是否已经存在一个活动的事务。
//
//	PROPAGATION_REQUIRES_NEW：这个特性要求方法必须在一个新的事务中运行，无论当前是否存在事务。如果当前存在事务，则会挂起该事务，并创建一个新的事务供该方法使用。这种特性适用于那些需要独立于其他事务执行的方法。
//
//	PROPAGATION_SUPPORTS：这个特性表示方法支持在当前事务中运行，但如果当前没有事务，则以非事务方式执行。这意味着方法可以在有事务的环境中运行，但不会强制要求一个新的事务被创建。
//
//	PROPAGATION_NOT_SUPPORTED：这个特性要求方法以非事务方式运行。如果当前存在事务，则会挂起当前事务，以确保该方法不会在事务的上下文中执行。
//
//	PROPAGATION_MANDATORY：这个特性要求方法必须在事务中运行。如果当前没有事务，则会抛出异常。这种特性适用于那些必须运行在事务中的方法，但不允许在没有事务的情况下执行。
//
//	PROPAGATION_NEVER：这个特性表示方法不应该在事务中运行。如果当前存在事务，则会抛出异常。这种特性适用于那些明确不应该在事务上下文中执行的方法。
//
//	PROPAGATION_NESTED：这个特性表示如果当前存在事务，则该方法应在嵌套事务中运行。嵌套事务可以独立提交或回滚，且如果外层事务提交或回滚，嵌套事务也会相应地提交或回滚。如果当前没有事务，则行为类似于PROPAGATION_REQUIRED。
//
//	这些传播特性的选择取决于具体业务逻辑的需求，以及如何处理并发访问和数据库操作的一致性。
}
